// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: cmd/domain/proto/s3video.proto

package s3video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideotransporterClient is the client API for Videotransporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideotransporterClient interface {
	VideoUpload(ctx context.Context, opts ...grpc.CallOption) (Videotransporter_VideoUploadClient, error)
	VideoDeteilUpload(ctx context.Context, in *VideoDeteilUpoadRequest, opts ...grpc.CallOption) (*VideoDeteilUpoadReplay, error)
	VideoDownload(ctx context.Context, in *VideoDownloadRequest, opts ...grpc.CallOption) (*VideoDownloadReplay, error)
}

type videotransporterClient struct {
	cc grpc.ClientConnInterface
}

func NewVideotransporterClient(cc grpc.ClientConnInterface) VideotransporterClient {
	return &videotransporterClient{cc}
}

func (c *videotransporterClient) VideoUpload(ctx context.Context, opts ...grpc.CallOption) (Videotransporter_VideoUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Videotransporter_ServiceDesc.Streams[0], "/s3video.Videotransporter/VideoUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &videotransporterVideoUploadClient{stream}
	return x, nil
}

type Videotransporter_VideoUploadClient interface {
	Send(*VideoUpoadRequest) error
	CloseAndRecv() (*VideoUploadReplay, error)
	grpc.ClientStream
}

type videotransporterVideoUploadClient struct {
	grpc.ClientStream
}

func (x *videotransporterVideoUploadClient) Send(m *VideoUpoadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videotransporterVideoUploadClient) CloseAndRecv() (*VideoUploadReplay, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VideoUploadReplay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videotransporterClient) VideoDeteilUpload(ctx context.Context, in *VideoDeteilUpoadRequest, opts ...grpc.CallOption) (*VideoDeteilUpoadReplay, error) {
	out := new(VideoDeteilUpoadReplay)
	err := c.cc.Invoke(ctx, "/s3video.Videotransporter/VideoDeteilUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videotransporterClient) VideoDownload(ctx context.Context, in *VideoDownloadRequest, opts ...grpc.CallOption) (*VideoDownloadReplay, error) {
	out := new(VideoDownloadReplay)
	err := c.cc.Invoke(ctx, "/s3video.Videotransporter/VideoDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideotransporterServer is the server API for Videotransporter service.
// All implementations must embed UnimplementedVideotransporterServer
// for forward compatibility
type VideotransporterServer interface {
	VideoUpload(Videotransporter_VideoUploadServer) error
	VideoDeteilUpload(context.Context, *VideoDeteilUpoadRequest) (*VideoDeteilUpoadReplay, error)
	VideoDownload(context.Context, *VideoDownloadRequest) (*VideoDownloadReplay, error)
	mustEmbedUnimplementedVideotransporterServer()
}

// UnimplementedVideotransporterServer must be embedded to have forward compatible implementations.
type UnimplementedVideotransporterServer struct {
}

func (UnimplementedVideotransporterServer) VideoUpload(Videotransporter_VideoUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method VideoUpload not implemented")
}
func (UnimplementedVideotransporterServer) VideoDeteilUpload(context.Context, *VideoDeteilUpoadRequest) (*VideoDeteilUpoadReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoDeteilUpload not implemented")
}
func (UnimplementedVideotransporterServer) VideoDownload(context.Context, *VideoDownloadRequest) (*VideoDownloadReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoDownload not implemented")
}
func (UnimplementedVideotransporterServer) mustEmbedUnimplementedVideotransporterServer() {}

// UnsafeVideotransporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideotransporterServer will
// result in compilation errors.
type UnsafeVideotransporterServer interface {
	mustEmbedUnimplementedVideotransporterServer()
}

func RegisterVideotransporterServer(s grpc.ServiceRegistrar, srv VideotransporterServer) {
	s.RegisterService(&Videotransporter_ServiceDesc, srv)
}

func _Videotransporter_VideoUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideotransporterServer).VideoUpload(&videotransporterVideoUploadServer{stream})
}

type Videotransporter_VideoUploadServer interface {
	SendAndClose(*VideoUploadReplay) error
	Recv() (*VideoUpoadRequest, error)
	grpc.ServerStream
}

type videotransporterVideoUploadServer struct {
	grpc.ServerStream
}

func (x *videotransporterVideoUploadServer) SendAndClose(m *VideoUploadReplay) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videotransporterVideoUploadServer) Recv() (*VideoUpoadRequest, error) {
	m := new(VideoUpoadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Videotransporter_VideoDeteilUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDeteilUpoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideotransporterServer).VideoDeteilUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3video.Videotransporter/VideoDeteilUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideotransporterServer).VideoDeteilUpload(ctx, req.(*VideoDeteilUpoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videotransporter_VideoDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideotransporterServer).VideoDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3video.Videotransporter/VideoDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideotransporterServer).VideoDownload(ctx, req.(*VideoDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Videotransporter_ServiceDesc is the grpc.ServiceDesc for Videotransporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Videotransporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s3video.Videotransporter",
	HandlerType: (*VideotransporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoDeteilUpload",
			Handler:    _Videotransporter_VideoDeteilUpload_Handler,
		},
		{
			MethodName: "VideoDownload",
			Handler:    _Videotransporter_VideoDownload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VideoUpload",
			Handler:       _Videotransporter_VideoUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/domain/proto/s3video.proto",
}
